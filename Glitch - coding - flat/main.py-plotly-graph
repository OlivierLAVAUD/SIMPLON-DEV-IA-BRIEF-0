import sqlite3
import json
import pandas as pd
import plotly.graph_objs as go

def query(conn, params):
    # Execution de la requete SQL
    result = pd.read_sql_query(params['query'], conn)

    # Creation du graphique avec Plotly
    fig = go.Figure()

    # Ajout des donnees au graphique
    for col in result.columns:
        fig.add_trace(go.Bar(x=result.index, y=result[col], name=col))

    # Mise en forme du layout
    fig.update_layout(
        xaxis=dict(title=params['plot_params'].get('x', '')),
        yaxis=dict(title=params['plot_params'].get('y', '')),
        barmode='stack',
        title=params['plot_params'].get('title', '')
    )

    # Affichage du graphique
    fig.show()

# Donnees JSON directement incluses dans le code
data_json = '''
{
  "queries": [
    {
      "query": "SELECT 'Tous les produits' as prd , SUM(prix * qte) AS ca FROM ventes;",      
      "plot_function": "bar",
      "plot_params": {
        "x": "prd",
        "y": "ca",       
        "title": "Chiffre d'affaires global"
      }
    },
    {
      "query": "SELECT produit, SUM(prix * qte) AS ca FROM ventes GROUP BY produit;",     
      "plot_function": "bar",
      "plot_params": {
        "x": "produit",
        "y": "ca",
        "color": "produit",        
        "title": "Chiffre d'affaires par produit"
      }
    },
    {
      "query": "SELECT region, SUM(prix * qte) AS ca FROM ventes GROUP BY region;",      
      "plot_function": "bar",
      "plot_params": {
        "x": "region",
        "y": "ca",
        "color": "region",        
        "title": "Chiffre d'affaires par region"
      }
    }
  ]
}
'''

# Conversion de la chaine JSON en objet Python
data = json.loads(data_json)

# Chargement du fichier CSV depuis le repertoire par defaut
df = pd.read_csv('ventes.csv')

# Creation d'une connexion a une base de donnees SQLite en memoire
conn = sqlite3.connect(':memory:')

# Ecriture du DataFrame dans la base de donnees
df.to_sql('ventes', conn, index=False, if_exists='replace')

# Appel de la fonction query pour chaque structure JSON
for query_json in data.get("queries", []):
    query(conn, query_json)

# Fermeture de la connexion
conn.close()